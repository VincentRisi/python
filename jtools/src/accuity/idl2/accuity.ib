struct tBananaRama
{
   int count;
   double whipped;
}

code
PYTHON:
from DB_AUDITS import DBAudits

actions = ['ADD', 'CHANGE', 'DELETE']
ADD, CHANGE, DELETE = 0, 1, 2

def amp_fix(value, asis=False):
    ''' 
      asis=True - leaves previous escapes 
    '''
    escapes = [('&', '&amp;'), ('<','&lt;'), ('>', '&gt;'), ('"','&quot;'), ("'",'&apos;')]
    if asis == False:
        for pair in escapes:
            value = value.replace(pair[1], pair[0])
    for pair in escapes:
        value = value.replace(pair[0], pair[1])
    return value

def make_xml(name, action, fields, values):
    usid = ''
    xml = '<%s action="%s">\r\n' % (name, actions[action])
    for i, field in enumerate(fields):
        value = str(values[i]) if len(values) == len(fields) else ''
        xml += '  <%s value="%s"/>\r\n' % (field, amp_fix(value))
        if field.lower() == 'usid':
            usid = value
    xml += '</%s>' % (name)
    return usid, xml

def write_audit(name, action, fields, old, new):
    if actions[action] != 'ADD':
        usid, xmlOld = make_xml(name, action, fields, old)
    else:
        xmlOld = ' '
    if actions[action] != 'DELETE':
        usid, xmlNew = make_xml(name, action, fields, new)
    else:
        xmlNew = ' '
    audit = DBAudits(connect)
    tmStamp = '20190101000000'
    audit.runInsert(0, name, actions[action], xmlOld, xmlNew, usid, tmStamp)
endcode

int ping(int given, int add)
{
message: #
openapi: get "ping/given/{given}/add/{add}" Utility
input 
    given;
    add;
code
PYTHON: 
    return given + add
endcode
}

int pang(int given, int add, string gotten)
{
message: #
openapi: get "pang/given/{given}/add/{add}/and/{gotten}" Utility
input 
    given;
    add;
    gotten;
code
PYTHON:
    log_info(gotten)
    return given + add;
endcode
}

void banana(tBananaRama *splits)
{
message: #
openapi: options banana Utility
input
    splits;
code
PYTHON:
    return
endcode
}

void bananaFor(int opt, tBananaRama *splits)
{
message: #
openapi: options "banana/opt/{opt}" Utility
input
    opt;
output
    splits;
code
PYTHON:
    return
endcode
}

